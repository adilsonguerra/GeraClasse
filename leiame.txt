Procedimeno para abrir no ECLIPSE.

1) Abrir novo projeto java no Eclipse e apontar a pasta do Geraclasse.

2) Vá em Projetos->Propriedades->Java Build Paths-> Add Extenal JARS:
	->Adicione o arquivo "servlet-api.jar". Esse arquivo é necessário porque é referenciado nas classes que serão geradas pelo Eclipse. Pode ser encontrado no TOMCAT. 
	->Adicione também o ojdbcX.jar para conectar ao banco.

3) O Eclipse criará, por default, a pasta \bin onde colocará as classes compiladas. 
	Deixar o nome "bin" pois será usado pelo build.xml. 

4) Antes de executar o Geraclasse.java, editar o arquivo e alterar as linhas 112 e 738 para referenciar o banco correto 
e também altere o usuário, senha no arquivo BaseDAO_Xxx.java e o owner no arquivo GeraClasseXxxDB.

5) Executar o Geraclasse.java. Na tela, escolher a tabela, colocar o nome do projeto, selecionar todas as colunas e clicar para gerar.

6) O GeraClasse, apenas gera os arquivos (abaixo) na pasta c:\Geraclasse\Arquivos_gerados. A pasta é criada caso não exista.

	 AtualizaxxxxxxxServlet.java    
	 build.xml                      
	 build_prj.xml                  
	 Consultarxxxxxxx.jsp           
	 ConsultaxxxxxxxServlet.java    
	 ExcluixxxxxxxServlet.java      
	 Grid_Camposxxxxxxx.jsp         
	 Grid_Detalhexxxxxxx.jsp        
	 InserexxxxxxxServlet.java      
	 MenuPrincxxxxxxx.jsp           
	 xxxxxxx.java                   
	 xxxxxxx.xml                    
	 xxxxxxxDAO.java                
	 xxxxxxxDB.java                 
	 web.xml_xxxxxxx                

	Os passos abaixo são para serem executados com os arquivos da pasta TEMPLATE que não tem nada haver com o GeraClasse, porque essa parte não está automatizada ainda. 

	* Os passos "a" e "b" são usados quando for usar o GeraClasse para gerar arquivos a partir de um xml(o mesmo gerado por ele mesmo)
	---------------------------------------------------------------------
	a) Criar o arquivo XML
	b) Alterar o xml se houver chave estrageira, para montar o combo automaticamente. Lembrando que a tag repositorio representa a tabela da chave estrangeira e a tag tabrespos representa a coluna descricao e a tag chaveresp representa a coluna chave da tabela estrangeira.
	--------------------------------------------------------------------------

	c) Incluir no projeto o arquivo build.xml criado pelo Geraclasse para poder executá-lo.

	d) Executar o target "carrega_arqs" do Build.xml no ANT. 
	   Toda a estrutura será criada e o os arquivos serão movidos ou copiados para suas devidas pastas.

	e) Agrupar os arquivos web_xxxx.xml num único arquivo web.xml

	** Os passos (f) e (g) só serão usados se NÃO trabalharmos com o Eclipse, pois o próprio Eclipse compilará (A compilação será feito no item 7, logo abaixo) e colocará o projeto no TOMCAT
	-------------------------------------------------------------------------
	f) Carregar e compilar o projeto no JCreator(Não esquecer de incluir o Build_prj.xml criado para o projeto e renomea-lo para Build.xml).

	g) Executar o Build.xml do projeto. Ele carregará o TOM CAT.(Não esquecer de tirar o TOM CAT do ar, primeiro).
    --------------------------------------------------------------------------
7) Criar outro projeto, tipo Web - Dynamic Web Project, apontando para a pasta que foi criada pelo Build.xml. 
	Quando compilar o projeto, o Eclipse criará uma pasta "\build" onde o Eclipse jogará as classes criadas.
	(NOTA: essa pasta "\build" é sugerida como default quando compilar o prj, caso faça tudo pelo Eclipse e não usarmos os passos (f) e  (g), então já altere esse caminho para a pasta Prj_xxxx/WebContent/WEB-INF/classes que o build_prj.xml jogaria.) 
	
	Problemas a acertar:
	a) Colocar os fontes .jar na pasta com.util. Atualmente o build.xml coloca os .class, deverá ser .jar (Não sei se já está acertado!)

